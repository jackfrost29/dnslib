package nl.sidn.dnslib.logic.openssl.wrapper;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.TypedPointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>libCrypto</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("libcrypto") 
@Runtime(CRuntime.class) 
public class LibCryptoLibrary {
	static {
		BridJ.register();
	}
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_F_CRYPTO_SET_EX_DATA = (int)102;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK = (int)1;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_SSL_SESS_CERT = (int)15;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_COMP = (int)14;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_USER = (int)100;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_UNLOCK = (int)2;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_X509_STORE = (int)11;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_FIPS2 = (int)40;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_GETHOSTBYNAME = (int)22;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX = (int)100;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_X509_STORE_CTX = (int)5;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_GETSERVBYNAME = (int)23;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int V_CRYPTO_MDEBUG_TIME = (int)0x1;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_SSL_SESSION = (int)3;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_DSA = (int)7;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int SSLEAY_VERSION = (int)0;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_X509_CRL = (int)6;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_RAND = (int)18;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_STORE = (int)15;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_EC_PRE_COMP = (int)36;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int SSLEAY_VERSION_NUMBER = (int)0x1000103f;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_F_DEF_GET_CLASS = (int)105;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_F_INT_DUP_EX_DATA = (int)106;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_NUM_LOCKS = (int)41;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_READ = (int)4;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_SSL_METHOD = (int)17;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int SSLEAY_BUILT_ON = (int)3;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_SSL_CTX = (int)2;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_STORE = (int)37;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_MALLOC2 = (int)27;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_RAND2 = (int)19;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_ENGINE = (int)30;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_BIO = (int)21;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_ECDSA = (int)32;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_X509 = (int)3;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int SSLEAY_CFLAGS = (int)2;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_WRITE = (int)8;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_SSL_CERT = (int)13;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_EC = (int)33;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_DH = (int)26;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_BN = (int)35;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID = (int)103;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int SSLEAY_PLATFORM = (int)4;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_MEM_CHECK_ON = (int)0x1;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_EVP_PKEY = (int)10;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_EX_DATA = (int)2;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_R_FIPS_MODE_NOT_SUPPORTED = (int)101;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_MEM_CHECK_OFF = (int)0x0;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_SSL = (int)1;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_F_FIPS_MODE_SET = (int)109;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_COMP = (int)38;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_FIPS = (int)39;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_SSL_CTX = (int)12;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_UI = (int)31;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK = (int)100;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_SSL_SESSION = (int)14;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_DYNLOCK = (int)29;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int V_CRYPTO_MDEBUG_ALL = (int)(0x1 | 0x2);
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_F_INT_FREE_EX_DATA = (int)107;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_MALLOC = (int)20;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_X509_REQ = (int)7;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_DH = (int)8;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_MEM_CHECK_DISABLE = (int)0x3;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_ECDSA = (int)12;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_SSL = (int)16;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_ECDH = (int)13;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_RSA = (int)6;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_F_INT_NEW_EX_DATA = (int)108;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_READDIR = (int)24;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_RSA_BLINDING = (int)25;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_MEM_CHECK_ENABLE = (int)0x2;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_UI = (int)11;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_BIO = (int)0;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_F_CRYPTO_GET_NEW_LOCKID = (int)101;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_DSO = (int)28;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int V_CRYPTO_MDEBUG_THREAD = (int)0x2;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_DSA = (int)8;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_X509_PKEY = (int)5;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int SSLEAY_DIR = (int)5;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_F_DEF_ADD_INDEX = (int)104;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_ECDH = (int)34;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_X509_STORE = (int)4;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_ENGINE = (int)9;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_ERR = (int)1;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_EX_INDEX_X509 = (int)10;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_X509_INFO = (int)4;
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static final int CRYPTO_LOCK_RSA = (int)9;
	/**
	 * Callback types for crypto.h<br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i>
	 */
	public static abstract class CRYPTO_EX_new extends Callback<CRYPTO_EX_new > {
		abstract public int apply(Pointer<? > parent, Pointer<? > ptr, Pointer<crypto_ex_data_st > ad, int idx, @org.bridj.ann.CLong long argl, Pointer<? > argp);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_EX_free extends Callback<CRYPTO_EX_free > {
		abstract public void apply(Pointer<? > parent, Pointer<? > ptr, Pointer<crypto_ex_data_st > ad, int idx, @org.bridj.ann.CLong long argl, Pointer<? > argp);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_EX_dup extends Callback<CRYPTO_EX_dup > {
		abstract public int apply(Pointer<crypto_ex_data_st > to, Pointer<crypto_ex_data_st > from, Pointer<? > from_d, int idx, @org.bridj.ann.CLong long argl, Pointer<? > argp);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:413</i> */
	public static abstract class CRYPTO_set_locking_callback_func_callback extends Callback<CRYPTO_set_locking_callback_func_callback > {
		abstract public void apply(int mode, int type, Pointer<Byte > file, int line);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_locking_callback_callback extends Callback<CRYPTO_get_locking_callback_callback > {
		abstract public void apply(int mode, int type, Pointer<Byte > file, int line);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:417</i> */
	public static abstract class CRYPTO_set_add_lock_callback_func_callback extends Callback<CRYPTO_set_add_lock_callback_func_callback > {
		abstract public int apply(Pointer<Integer > num, int mount, int type, Pointer<Byte > file, int line);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_add_lock_callback_callback extends Callback<CRYPTO_get_add_lock_callback_callback > {
		abstract public int apply(Pointer<Integer > num, int mount, int type, Pointer<Byte > file, int line);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:431</i> */
	public static abstract class CRYPTO_THREADID_set_callback_threadid_func_callback extends Callback<CRYPTO_THREADID_set_callback_threadid_func_callback > {
		abstract public void apply(Pointer<CRYPTO_THREADID > CRYPTO_THREADIDPtr1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_THREADID_get_callback_callback extends Callback<CRYPTO_THREADID_get_callback_callback > {
		abstract public void apply(Pointer<CRYPTO_THREADID > CRYPTO_THREADIDPtr1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:438</i> */
	public static abstract class CRYPTO_set_id_callback_func_callback extends Callback<CRYPTO_set_id_callback_func_callback > {
		@org.bridj.ann.CLong 
		abstract public long apply();
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_id_callback_callback extends Callback<CRYPTO_get_id_callback_callback > {
		@org.bridj.ann.CLong 
		abstract public long apply();
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:450</i> */
	public static abstract class CRYPTO_set_dynlock_create_callback_dyn_create_function_callback extends Callback<CRYPTO_set_dynlock_create_callback_dyn_create_function_callback > {
		abstract public Pointer<LibCryptoLibrary.CRYPTO_dynlock_value > apply(Pointer<Byte > file, int line);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:451</i> */
	public static abstract class CRYPTO_set_dynlock_lock_callback_dyn_lock_function_callback extends Callback<CRYPTO_set_dynlock_lock_callback_dyn_lock_function_callback > {
		abstract public void apply(int mode, Pointer<LibCryptoLibrary.CRYPTO_dynlock_value > l, Pointer<Byte > file, int line);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:452</i> */
	public static abstract class CRYPTO_set_dynlock_destroy_callback_dyn_destroy_function_callback extends Callback<CRYPTO_set_dynlock_destroy_callback_dyn_destroy_function_callback > {
		abstract public void apply(Pointer<LibCryptoLibrary.CRYPTO_dynlock_value > l, Pointer<Byte > file, int line);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_dynlock_create_callback_callback extends Callback<CRYPTO_get_dynlock_create_callback_callback > {
		abstract public Pointer<LibCryptoLibrary.CRYPTO_dynlock_value > apply(Pointer<Byte > file, int line);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_dynlock_lock_callback_callback extends Callback<CRYPTO_get_dynlock_lock_callback_callback > {
		abstract public void apply(int mode, Pointer<LibCryptoLibrary.CRYPTO_dynlock_value > l, Pointer<Byte > file, int line);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_dynlock_destroy_callback_callback extends Callback<CRYPTO_get_dynlock_destroy_callback_callback > {
		abstract public void apply(Pointer<LibCryptoLibrary.CRYPTO_dynlock_value > l, Pointer<Byte > file, int line);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:459</i> */
	public static abstract class CRYPTO_set_mem_functions_m_callback extends Callback<CRYPTO_set_mem_functions_m_callback > {
		abstract public Pointer<? > apply(@Ptr long size_t1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:459</i> */
	public static abstract class CRYPTO_set_mem_functions_r_callback extends Callback<CRYPTO_set_mem_functions_r_callback > {
		abstract public Pointer<? > apply(Pointer<? > voidPtr1, @Ptr long size_t1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:459</i> */
	public static abstract class CRYPTO_set_mem_functions_f_callback extends Callback<CRYPTO_set_mem_functions_f_callback > {
		abstract public void apply(Pointer<? > voidPtr1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:460</i> */
	public static abstract class CRYPTO_set_locked_mem_functions_m_callback extends Callback<CRYPTO_set_locked_mem_functions_m_callback > {
		abstract public Pointer<? > apply(@Ptr long size_t1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:460</i> */
	public static abstract class CRYPTO_set_locked_mem_functions_free_func_callback extends Callback<CRYPTO_set_locked_mem_functions_free_func_callback > {
		abstract public void apply(Pointer<? > voidPtr1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:461</i> */
	public static abstract class CRYPTO_set_mem_ex_functions_m_callback extends Callback<CRYPTO_set_mem_ex_functions_m_callback > {
		abstract public Pointer<? > apply(@Ptr long size_t1, Pointer<Byte > charPtr1, int int1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:462</i> */
	public static abstract class CRYPTO_set_mem_ex_functions_r_callback extends Callback<CRYPTO_set_mem_ex_functions_r_callback > {
		abstract public Pointer<? > apply(Pointer<? > voidPtr1, @Ptr long size_t1, Pointer<Byte > charPtr1, int int1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:463</i> */
	public static abstract class CRYPTO_set_mem_ex_functions_f_callback extends Callback<CRYPTO_set_mem_ex_functions_f_callback > {
		abstract public void apply(Pointer<? > voidPtr1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:464</i> */
	public static abstract class CRYPTO_set_locked_mem_ex_functions_m_callback extends Callback<CRYPTO_set_locked_mem_ex_functions_m_callback > {
		abstract public Pointer<? > apply(@Ptr long size_t1, Pointer<Byte > charPtr1, int int1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:465</i> */
	public static abstract class CRYPTO_set_locked_mem_ex_functions_free_func_callback extends Callback<CRYPTO_set_locked_mem_ex_functions_free_func_callback > {
		abstract public void apply(Pointer<? > voidPtr1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:466</i> */
	public static abstract class CRYPTO_set_mem_debug_functions_m_callback extends Callback<CRYPTO_set_mem_debug_functions_m_callback > {
		abstract public void apply(Pointer<? > voidPtr1, int int1, Pointer<Byte > charPtr1, int int2, int int3);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:467</i> */
	public static abstract class CRYPTO_set_mem_debug_functions_r_callback extends Callback<CRYPTO_set_mem_debug_functions_r_callback > {
		abstract public void apply(Pointer<? > voidPtr1, Pointer<? > voidPtr2, int int1, Pointer<Byte > charPtr1, int int2, int int3);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:468</i> */
	public static abstract class CRYPTO_set_mem_debug_functions_f_callback extends Callback<CRYPTO_set_mem_debug_functions_f_callback > {
		abstract public void apply(Pointer<? > voidPtr1, int int1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:469</i> */
	public static abstract class CRYPTO_set_mem_debug_functions_so_callback extends Callback<CRYPTO_set_mem_debug_functions_so_callback > {
		abstract public void apply(@org.bridj.ann.CLong long l1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h:470</i> */
	public static abstract class CRYPTO_set_mem_debug_functions_go_callback extends Callback<CRYPTO_set_mem_debug_functions_go_callback > {
		@org.bridj.ann.CLong 
		abstract public long apply();
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_mem_functions_m_callback extends Callback<CRYPTO_get_mem_functions_m_callback > {
		abstract public Pointer<? > apply(@Ptr long size_t1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_mem_functions_r_callback extends Callback<CRYPTO_get_mem_functions_r_callback > {
		abstract public Pointer<? > apply(Pointer<? > voidPtr1, @Ptr long size_t1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_mem_functions_f_callback extends Callback<CRYPTO_get_mem_functions_f_callback > {
		abstract public void apply(Pointer<? > voidPtr1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_locked_mem_functions_m_callback extends Callback<CRYPTO_get_locked_mem_functions_m_callback > {
		abstract public Pointer<? > apply(@Ptr long size_t1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_locked_mem_functions_f_callback extends Callback<CRYPTO_get_locked_mem_functions_f_callback > {
		abstract public void apply(Pointer<? > voidPtr1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_mem_ex_functions_m_callback extends Callback<CRYPTO_get_mem_ex_functions_m_callback > {
		abstract public Pointer<? > apply(@Ptr long size_t1, Pointer<Byte > charPtr1, int int1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_mem_ex_functions_r_callback extends Callback<CRYPTO_get_mem_ex_functions_r_callback > {
		abstract public Pointer<? > apply(Pointer<? > voidPtr1, @Ptr long size_t1, Pointer<Byte > charPtr1, int int1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_mem_ex_functions_f_callback extends Callback<CRYPTO_get_mem_ex_functions_f_callback > {
		abstract public void apply(Pointer<? > voidPtr1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_locked_mem_ex_functions_m_callback extends Callback<CRYPTO_get_locked_mem_ex_functions_m_callback > {
		abstract public Pointer<? > apply(@Ptr long size_t1, Pointer<Byte > charPtr1, int int1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_locked_mem_ex_functions_f_callback extends Callback<CRYPTO_get_locked_mem_ex_functions_f_callback > {
		abstract public void apply(Pointer<? > voidPtr1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_mem_debug_functions_m_callback extends Callback<CRYPTO_get_mem_debug_functions_m_callback > {
		abstract public void apply(Pointer<? > voidPtr1, int int1, Pointer<Byte > charPtr1, int int2, int int3);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_mem_debug_functions_r_callback extends Callback<CRYPTO_get_mem_debug_functions_r_callback > {
		abstract public void apply(Pointer<? > voidPtr1, Pointer<? > voidPtr2, int int1, Pointer<Byte > charPtr1, int int2, int int3);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_mem_debug_functions_f_callback extends Callback<CRYPTO_get_mem_debug_functions_f_callback > {
		abstract public void apply(Pointer<? > voidPtr1, int int1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_mem_debug_functions_so_callback extends Callback<CRYPTO_get_mem_debug_functions_so_callback > {
		abstract public void apply(@org.bridj.ann.CLong long l1);
	};
	/** <i>native declaration : openssl-1.0.1e/crypto/crypto.h</i> */
	public static abstract class CRYPTO_get_mem_debug_functions_go_callback extends Callback<CRYPTO_get_mem_debug_functions_go_callback > {
		@org.bridj.ann.CLong 
		abstract public long apply();
	};
	/**
	 * Original signature : <code>int CRYPTO_mem_ctrl(int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:350</i>
	 */
	native public static int CRYPTO_mem_ctrl(int mode);
	/**
	 * Original signature : <code>int CRYPTO_is_mem_check_on()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:351</i>
	 */
	native public static int CRYPTO_is_mem_check_on();
	/**
	 * Original signature : <code>char* SSLeay_version(int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:378</i>
	 */
	public static Pointer<Byte > SSLeay_version(int type) {
		return Pointer.pointerToAddress(SSLeay_version$2(type), Byte.class);
	}
	@Ptr 
	@Name("SSLeay_version") 
	protected native static long SSLeay_version$2(int type);
	/**
	 * Original signature : <code>long SSLeay()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:379</i>
	 */
	@org.bridj.ann.CLong 
	native public static long SSLeay();
	/**
	 * Original signature : <code>int OPENSSL_issetugid()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:381</i>
	 */
	native public static int OPENSSL_issetugid();
	/**
	 * Return an opaque pointer to the current "ex_data" implementation<br>
	 * Original signature : <code>CRYPTO_EX_DATA_IMPL* CRYPTO_get_ex_data_implementation()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:386</i>
	 */
	public static Pointer<LibCryptoLibrary.st_CRYPTO_EX_DATA_IMPL > CRYPTO_get_ex_data_implementation() {
		return Pointer.pointerToAddress(CRYPTO_get_ex_data_implementation$2(), LibCryptoLibrary.st_CRYPTO_EX_DATA_IMPL.class);
	}
	@Ptr 
	@Name("CRYPTO_get_ex_data_implementation") 
	protected native static long CRYPTO_get_ex_data_implementation$2();
	/**
	 * Sets the "ex_data" implementation to be used (if it's not too late)<br>
	 * Original signature : <code>int CRYPTO_set_ex_data_implementation(const CRYPTO_EX_DATA_IMPL*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:388</i>
	 */
	public static int CRYPTO_set_ex_data_implementation(Pointer<LibCryptoLibrary.st_CRYPTO_EX_DATA_IMPL > i) {
		return CRYPTO_set_ex_data_implementation(Pointer.getPeer(i));
	}
	protected native static int CRYPTO_set_ex_data_implementation(@Ptr long i);
	/**
	 * Get a new "ex_data" class, and return the corresponding "class_index"<br>
	 * Original signature : <code>int CRYPTO_ex_data_new_class()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:390</i>
	 */
	native public static int CRYPTO_ex_data_new_class();
	/**
	 * Within a given class, get/register a new index<br>
	 * Original signature : <code>int CRYPTO_get_ex_new_index(int, long, void*, CRYPTO_EX_new*, CRYPTO_EX_dup*, CRYPTO_EX_free*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:392</i>
	 */
	public static int CRYPTO_get_ex_new_index(int class_index, @org.bridj.ann.CLong long argl, Pointer<? > argp, Pointer<LibCryptoLibrary.CRYPTO_EX_new > new_func, Pointer<LibCryptoLibrary.CRYPTO_EX_dup > dup_func, Pointer<LibCryptoLibrary.CRYPTO_EX_free > free_func) {
		return CRYPTO_get_ex_new_index(class_index, argl, Pointer.getPeer(argp), Pointer.getPeer(new_func), Pointer.getPeer(dup_func), Pointer.getPeer(free_func));
	}
	protected native static int CRYPTO_get_ex_new_index(int class_index, @org.bridj.ann.CLong long argl, @Ptr long argp, @Ptr long new_func, @Ptr long dup_func, @Ptr long free_func);
	/**
	 * Initialise/duplicate/free CRYPTO_EX_DATA variables corresponding to a given<br>
	 * class (invokes whatever per-class callbacks are applicable)<br>
	 * Original signature : <code>int CRYPTO_new_ex_data(int, void*, CRYPTO_EX_DATA*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:397</i>
	 */
	public static int CRYPTO_new_ex_data(int class_index, Pointer<? > obj, Pointer<crypto_ex_data_st > ad) {
		return CRYPTO_new_ex_data(class_index, Pointer.getPeer(obj), Pointer.getPeer(ad));
	}
	protected native static int CRYPTO_new_ex_data(int class_index, @Ptr long obj, @Ptr long ad);
	/**
	 * Original signature : <code>int CRYPTO_dup_ex_data(int, CRYPTO_EX_DATA*, CRYPTO_EX_DATA*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:398</i>
	 */
	public static int CRYPTO_dup_ex_data(int class_index, Pointer<crypto_ex_data_st > to, Pointer<crypto_ex_data_st > from) {
		return CRYPTO_dup_ex_data(class_index, Pointer.getPeer(to), Pointer.getPeer(from));
	}
	protected native static int CRYPTO_dup_ex_data(int class_index, @Ptr long to, @Ptr long from);
	/**
	 * Original signature : <code>void CRYPTO_free_ex_data(int, void*, CRYPTO_EX_DATA*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:400</i>
	 */
	public static void CRYPTO_free_ex_data(int class_index, Pointer<? > obj, Pointer<crypto_ex_data_st > ad) {
		CRYPTO_free_ex_data(class_index, Pointer.getPeer(obj), Pointer.getPeer(ad));
	}
	protected native static void CRYPTO_free_ex_data(int class_index, @Ptr long obj, @Ptr long ad);
	/**
	 * Get/set data in a CRYPTO_EX_DATA variable corresponding to a particular index<br>
	 * (relative to the class type involved)<br>
	 * Original signature : <code>int CRYPTO_set_ex_data(CRYPTO_EX_DATA*, int, void*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:403</i>
	 */
	public static int CRYPTO_set_ex_data(Pointer<crypto_ex_data_st > ad, int idx, Pointer<? > val) {
		return CRYPTO_set_ex_data(Pointer.getPeer(ad), idx, Pointer.getPeer(val));
	}
	protected native static int CRYPTO_set_ex_data(@Ptr long ad, int idx, @Ptr long val);
	/**
	 * Original signature : <code>void* CRYPTO_get_ex_data(const CRYPTO_EX_DATA*, int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:404</i>
	 */
	public static Pointer<? > CRYPTO_get_ex_data(Pointer<crypto_ex_data_st > ad, int idx) {
		return Pointer.pointerToAddress(CRYPTO_get_ex_data(Pointer.getPeer(ad), idx));
	}
	@Ptr 
	protected native static long CRYPTO_get_ex_data(@Ptr long ad, int idx);
	/**
	 * This function cleans up all "ex_data" state. It mustn't be called under<br>
	 * potential race-conditions.<br>
	 * Original signature : <code>void CRYPTO_cleanup_all_ex_data()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:407</i>
	 */
	native public static void CRYPTO_cleanup_all_ex_data();
	/**
	 * Original signature : <code>int CRYPTO_get_new_lockid(char*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:409</i>
	 */
	public static int CRYPTO_get_new_lockid(Pointer<Byte > name) {
		return CRYPTO_get_new_lockid(Pointer.getPeer(name));
	}
	protected native static int CRYPTO_get_new_lockid(@Ptr long name);
	/**
	 * return CRYPTO_NUM_LOCKS (shared libs!)<br>
	 * Original signature : <code>int CRYPTO_num_locks()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:411</i>
	 */
	native public static int CRYPTO_num_locks();
	/**
	 * Original signature : <code>void CRYPTO_lock(int, int, const char*, int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:412</i>
	 */
	public static void CRYPTO_lock(int mode, int type, Pointer<Byte > file, int line) {
		CRYPTO_lock(mode, type, Pointer.getPeer(file), line);
	}
	protected native static void CRYPTO_lock(int mode, int type, @Ptr long file, int line);
	/**
	 * Original signature : <code>void CRYPTO_set_locking_callback(CRYPTO_set_locking_callback_func_callback)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:413</i>
	 */
	public static void CRYPTO_set_locking_callback(Pointer<LibCryptoLibrary.CRYPTO_set_locking_callback_func_callback > arg) {
		CRYPTO_set_locking_callback(Pointer.getPeer(arg));
	}
	protected native static void CRYPTO_set_locking_callback(@Ptr long arg);
	/**
	 * Original signature : <code>CRYPTO_get_locking_callback_callback CRYPTO_get_locking_callback()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:415</i>
	 */
	public static Pointer<LibCryptoLibrary.CRYPTO_get_locking_callback_callback > CRYPTO_get_locking_callback() {
		return Pointer.pointerToAddress(CRYPTO_get_locking_callback$2(), LibCryptoLibrary.CRYPTO_get_locking_callback_callback.class);
	}
	@Ptr 
	@Name("CRYPTO_get_locking_callback") 
	protected native static long CRYPTO_get_locking_callback$2();
	/**
	 * Original signature : <code>void CRYPTO_set_add_lock_callback(CRYPTO_set_add_lock_callback_func_callback)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:417</i>
	 */
	public static void CRYPTO_set_add_lock_callback(Pointer<LibCryptoLibrary.CRYPTO_set_add_lock_callback_func_callback > arg) {
		CRYPTO_set_add_lock_callback(Pointer.getPeer(arg));
	}
	protected native static void CRYPTO_set_add_lock_callback(@Ptr long arg);
	/**
	 * Original signature : <code>CRYPTO_get_add_lock_callback_callback CRYPTO_get_add_lock_callback()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:419</i>
	 */
	public static Pointer<LibCryptoLibrary.CRYPTO_get_add_lock_callback_callback > CRYPTO_get_add_lock_callback() {
		return Pointer.pointerToAddress(CRYPTO_get_add_lock_callback$2(), LibCryptoLibrary.CRYPTO_get_add_lock_callback_callback.class);
	}
	@Ptr 
	@Name("CRYPTO_get_add_lock_callback") 
	protected native static long CRYPTO_get_add_lock_callback$2();
	/**
	 * Only use CRYPTO_THREADID_set_[numeric|pointer]() within callbacks<br>
	 * Original signature : <code>void CRYPTO_THREADID_set_numeric(CRYPTO_THREADID*, unsigned long)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:429</i>
	 */
	public static void CRYPTO_THREADID_set_numeric(Pointer<CRYPTO_THREADID > id, @org.bridj.ann.CLong long val) {
		CRYPTO_THREADID_set_numeric(Pointer.getPeer(id), val);
	}
	protected native static void CRYPTO_THREADID_set_numeric(@Ptr long id, @org.bridj.ann.CLong long val);
	/**
	 * Original signature : <code>void CRYPTO_THREADID_set_pointer(CRYPTO_THREADID*, void*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:430</i>
	 */
	public static void CRYPTO_THREADID_set_pointer(Pointer<CRYPTO_THREADID > id, Pointer<? > ptr) {
		CRYPTO_THREADID_set_pointer(Pointer.getPeer(id), Pointer.getPeer(ptr));
	}
	protected native static void CRYPTO_THREADID_set_pointer(@Ptr long id, @Ptr long ptr);
	/**
	 * Original signature : <code>int CRYPTO_THREADID_set_callback(CRYPTO_THREADID_set_callback_threadid_func_callback)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:431</i>
	 */
	public static int CRYPTO_THREADID_set_callback(Pointer<LibCryptoLibrary.CRYPTO_THREADID_set_callback_threadid_func_callback > arg) {
		return CRYPTO_THREADID_set_callback(Pointer.getPeer(arg));
	}
	protected native static int CRYPTO_THREADID_set_callback(@Ptr long arg);
	/**
	 * Original signature : <code>CRYPTO_THREADID_get_callback_callback CRYPTO_THREADID_get_callback()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:432</i>
	 */
	public static Pointer<LibCryptoLibrary.CRYPTO_THREADID_get_callback_callback > CRYPTO_THREADID_get_callback() {
		return Pointer.pointerToAddress(CRYPTO_THREADID_get_callback$2(), LibCryptoLibrary.CRYPTO_THREADID_get_callback_callback.class);
	}
	@Ptr 
	@Name("CRYPTO_THREADID_get_callback") 
	protected native static long CRYPTO_THREADID_get_callback$2();
	/**
	 * Original signature : <code>void CRYPTO_THREADID_current(CRYPTO_THREADID*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:433</i>
	 */
	public static void CRYPTO_THREADID_current(Pointer<CRYPTO_THREADID > id) {
		CRYPTO_THREADID_current(Pointer.getPeer(id));
	}
	protected native static void CRYPTO_THREADID_current(@Ptr long id);
	/**
	 * Original signature : <code>int CRYPTO_THREADID_cmp(const CRYPTO_THREADID*, const CRYPTO_THREADID*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:434</i>
	 */
	public static int CRYPTO_THREADID_cmp(Pointer<CRYPTO_THREADID > a, Pointer<CRYPTO_THREADID > b) {
		return CRYPTO_THREADID_cmp(Pointer.getPeer(a), Pointer.getPeer(b));
	}
	protected native static int CRYPTO_THREADID_cmp(@Ptr long a, @Ptr long b);
	/**
	 * Original signature : <code>void CRYPTO_THREADID_cpy(CRYPTO_THREADID*, const CRYPTO_THREADID*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:435</i>
	 */
	public static void CRYPTO_THREADID_cpy(Pointer<CRYPTO_THREADID > dest, Pointer<CRYPTO_THREADID > src) {
		CRYPTO_THREADID_cpy(Pointer.getPeer(dest), Pointer.getPeer(src));
	}
	protected native static void CRYPTO_THREADID_cpy(@Ptr long dest, @Ptr long src);
	/**
	 * Original signature : <code>long CRYPTO_THREADID_hash(const CRYPTO_THREADID*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:436</i>
	 */
	@org.bridj.ann.CLong 
	public static long CRYPTO_THREADID_hash(Pointer<CRYPTO_THREADID > id) {
		return CRYPTO_THREADID_hash(Pointer.getPeer(id));
	}
	@org.bridj.ann.CLong 
	protected native static long CRYPTO_THREADID_hash(@Ptr long id);
	/**
	 * Original signature : <code>void CRYPTO_set_id_callback(CRYPTO_set_id_callback_func_callback)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:438</i>
	 */
	public static void CRYPTO_set_id_callback(Pointer<LibCryptoLibrary.CRYPTO_set_id_callback_func_callback > arg) {
		CRYPTO_set_id_callback(Pointer.getPeer(arg));
	}
	protected native static void CRYPTO_set_id_callback(@Ptr long arg);
	/**
	 * Original signature : <code>CRYPTO_get_id_callback_callback CRYPTO_get_id_callback()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:439</i>
	 */
	public static Pointer<LibCryptoLibrary.CRYPTO_get_id_callback_callback > CRYPTO_get_id_callback() {
		return Pointer.pointerToAddress(CRYPTO_get_id_callback$2(), LibCryptoLibrary.CRYPTO_get_id_callback_callback.class);
	}
	@Ptr 
	@Name("CRYPTO_get_id_callback") 
	protected native static long CRYPTO_get_id_callback$2();
	/**
	 * Original signature : <code>long CRYPTO_thread_id()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:440</i>
	 */
	@org.bridj.ann.CLong 
	native public static long CRYPTO_thread_id();
	/**
	 * Original signature : <code>char* CRYPTO_get_lock_name(int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:443</i>
	 */
	public static Pointer<Byte > CRYPTO_get_lock_name(int type) {
		return Pointer.pointerToAddress(CRYPTO_get_lock_name$2(type), Byte.class);
	}
	@Ptr 
	@Name("CRYPTO_get_lock_name") 
	protected native static long CRYPTO_get_lock_name$2(int type);
	/**
	 * Original signature : <code>int CRYPTO_add_lock(int*, int, int, const char*, int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:444</i>
	 */
	public static int CRYPTO_add_lock(Pointer<Integer > pointer, int amount, int type, Pointer<Byte > file, int line) {
		return CRYPTO_add_lock(Pointer.getPeer(pointer), amount, type, Pointer.getPeer(file), line);
	}
	protected native static int CRYPTO_add_lock(@Ptr long pointer, int amount, int type, @Ptr long file, int line);
	/**
	 * Original signature : <code>int CRYPTO_get_new_dynlockid()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:447</i>
	 */
	native public static int CRYPTO_get_new_dynlockid();
	/**
	 * Original signature : <code>void CRYPTO_destroy_dynlockid(int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:448</i>
	 */
	native public static void CRYPTO_destroy_dynlockid(int i);
	/**
	 * Original signature : <code>CRYPTO_dynlock_value* CRYPTO_get_dynlock_value(int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:449</i>
	 */
	public static Pointer<LibCryptoLibrary.CRYPTO_dynlock_value > CRYPTO_get_dynlock_value(int i) {
		return Pointer.pointerToAddress(CRYPTO_get_dynlock_value$2(i), LibCryptoLibrary.CRYPTO_dynlock_value.class);
	}
	@Ptr 
	@Name("CRYPTO_get_dynlock_value") 
	protected native static long CRYPTO_get_dynlock_value$2(int i);
	/**
	 * Original signature : <code>void CRYPTO_set_dynlock_create_callback(CRYPTO_set_dynlock_create_callback_dyn_create_function_callback)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:450</i>
	 */
	public static void CRYPTO_set_dynlock_create_callback(Pointer<LibCryptoLibrary.CRYPTO_set_dynlock_create_callback_dyn_create_function_callback > arg) {
		CRYPTO_set_dynlock_create_callback(Pointer.getPeer(arg));
	}
	protected native static void CRYPTO_set_dynlock_create_callback(@Ptr long arg);
	/**
	 * Original signature : <code>void CRYPTO_set_dynlock_lock_callback(CRYPTO_set_dynlock_lock_callback_dyn_lock_function_callback)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:451</i>
	 */
	public static void CRYPTO_set_dynlock_lock_callback(Pointer<LibCryptoLibrary.CRYPTO_set_dynlock_lock_callback_dyn_lock_function_callback > arg) {
		CRYPTO_set_dynlock_lock_callback(Pointer.getPeer(arg));
	}
	protected native static void CRYPTO_set_dynlock_lock_callback(@Ptr long arg);
	/**
	 * Original signature : <code>void CRYPTO_set_dynlock_destroy_callback(CRYPTO_set_dynlock_destroy_callback_dyn_destroy_function_callback)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:452</i>
	 */
	public static void CRYPTO_set_dynlock_destroy_callback(Pointer<LibCryptoLibrary.CRYPTO_set_dynlock_destroy_callback_dyn_destroy_function_callback > arg) {
		CRYPTO_set_dynlock_destroy_callback(Pointer.getPeer(arg));
	}
	protected native static void CRYPTO_set_dynlock_destroy_callback(@Ptr long arg);
	/**
	 * Original signature : <code>CRYPTO_get_dynlock_create_callback_callback CRYPTO_get_dynlock_create_callback()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:453</i>
	 */
	public static Pointer<LibCryptoLibrary.CRYPTO_get_dynlock_create_callback_callback > CRYPTO_get_dynlock_create_callback() {
		return Pointer.pointerToAddress(CRYPTO_get_dynlock_create_callback$2(), LibCryptoLibrary.CRYPTO_get_dynlock_create_callback_callback.class);
	}
	@Ptr 
	@Name("CRYPTO_get_dynlock_create_callback") 
	protected native static long CRYPTO_get_dynlock_create_callback$2();
	/**
	 * Original signature : <code>CRYPTO_get_dynlock_lock_callback_callback CRYPTO_get_dynlock_lock_callback()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:454</i>
	 */
	public static Pointer<LibCryptoLibrary.CRYPTO_get_dynlock_lock_callback_callback > CRYPTO_get_dynlock_lock_callback() {
		return Pointer.pointerToAddress(CRYPTO_get_dynlock_lock_callback$2(), LibCryptoLibrary.CRYPTO_get_dynlock_lock_callback_callback.class);
	}
	@Ptr 
	@Name("CRYPTO_get_dynlock_lock_callback") 
	protected native static long CRYPTO_get_dynlock_lock_callback$2();
	/**
	 * Original signature : <code>CRYPTO_get_dynlock_destroy_callback_callback CRYPTO_get_dynlock_destroy_callback()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:455</i>
	 */
	public static Pointer<LibCryptoLibrary.CRYPTO_get_dynlock_destroy_callback_callback > CRYPTO_get_dynlock_destroy_callback() {
		return Pointer.pointerToAddress(CRYPTO_get_dynlock_destroy_callback$2(), LibCryptoLibrary.CRYPTO_get_dynlock_destroy_callback_callback.class);
	}
	@Ptr 
	@Name("CRYPTO_get_dynlock_destroy_callback") 
	protected native static long CRYPTO_get_dynlock_destroy_callback$2();
	/**
	 * CRYPTO_set_mem_functions includes CRYPTO_set_locked_mem_functions --<br>
	 * call the latter last if you need different functions<br>
	 * Original signature : <code>int CRYPTO_set_mem_functions(CRYPTO_set_mem_functions_m_callback, CRYPTO_set_mem_functions_r_callback, CRYPTO_set_mem_functions_f_callback)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:459</i>
	 */
	public static int CRYPTO_set_mem_functions(Pointer<LibCryptoLibrary.CRYPTO_set_mem_functions_m_callback > arg, Pointer<LibCryptoLibrary.CRYPTO_set_mem_functions_r_callback > arg2, Pointer<LibCryptoLibrary.CRYPTO_set_mem_functions_f_callback > arg3) {
		return CRYPTO_set_mem_functions(Pointer.getPeer(arg), Pointer.getPeer(arg2), Pointer.getPeer(arg3));
	}
	protected native static int CRYPTO_set_mem_functions(@Ptr long arg, @Ptr long arg2, @Ptr long arg3);
	/**
	 * Original signature : <code>int CRYPTO_set_locked_mem_functions(CRYPTO_set_locked_mem_functions_m_callback, CRYPTO_set_locked_mem_functions_free_func_callback)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:460</i>
	 */
	public static int CRYPTO_set_locked_mem_functions(Pointer<LibCryptoLibrary.CRYPTO_set_locked_mem_functions_m_callback > arg, Pointer<LibCryptoLibrary.CRYPTO_set_locked_mem_functions_free_func_callback > arg2) {
		return CRYPTO_set_locked_mem_functions(Pointer.getPeer(arg), Pointer.getPeer(arg2));
	}
	protected native static int CRYPTO_set_locked_mem_functions(@Ptr long arg, @Ptr long arg2);
	/**
	 * Original signature : <code>int CRYPTO_set_mem_ex_functions(CRYPTO_set_mem_ex_functions_m_callback, CRYPTO_set_mem_ex_functions_r_callback, CRYPTO_set_mem_ex_functions_f_callback)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:461</i>
	 */
	public static int CRYPTO_set_mem_ex_functions(Pointer<LibCryptoLibrary.CRYPTO_set_mem_ex_functions_m_callback > arg, Pointer<LibCryptoLibrary.CRYPTO_set_mem_ex_functions_r_callback > arg2, Pointer<LibCryptoLibrary.CRYPTO_set_mem_ex_functions_f_callback > arg3) {
		return CRYPTO_set_mem_ex_functions(Pointer.getPeer(arg), Pointer.getPeer(arg2), Pointer.getPeer(arg3));
	}
	protected native static int CRYPTO_set_mem_ex_functions(@Ptr long arg, @Ptr long arg2, @Ptr long arg3);
	/**
	 * Original signature : <code>int CRYPTO_set_locked_mem_ex_functions(CRYPTO_set_locked_mem_ex_functions_m_callback, CRYPTO_set_locked_mem_ex_functions_free_func_callback)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:464</i>
	 */
	public static int CRYPTO_set_locked_mem_ex_functions(Pointer<LibCryptoLibrary.CRYPTO_set_locked_mem_ex_functions_m_callback > arg, Pointer<LibCryptoLibrary.CRYPTO_set_locked_mem_ex_functions_free_func_callback > arg2) {
		return CRYPTO_set_locked_mem_ex_functions(Pointer.getPeer(arg), Pointer.getPeer(arg2));
	}
	protected native static int CRYPTO_set_locked_mem_ex_functions(@Ptr long arg, @Ptr long arg2);
	/**
	 * Original signature : <code>int CRYPTO_set_mem_debug_functions(CRYPTO_set_mem_debug_functions_m_callback, CRYPTO_set_mem_debug_functions_r_callback, CRYPTO_set_mem_debug_functions_f_callback, CRYPTO_set_mem_debug_functions_so_callback, CRYPTO_set_mem_debug_functions_go_callback)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:466</i>
	 */
	public static int CRYPTO_set_mem_debug_functions(Pointer<LibCryptoLibrary.CRYPTO_set_mem_debug_functions_m_callback > arg, Pointer<LibCryptoLibrary.CRYPTO_set_mem_debug_functions_r_callback > arg2, Pointer<LibCryptoLibrary.CRYPTO_set_mem_debug_functions_f_callback > arg3, Pointer<LibCryptoLibrary.CRYPTO_set_mem_debug_functions_so_callback > arg4, Pointer<LibCryptoLibrary.CRYPTO_set_mem_debug_functions_go_callback > arg5) {
		return CRYPTO_set_mem_debug_functions(Pointer.getPeer(arg), Pointer.getPeer(arg2), Pointer.getPeer(arg3), Pointer.getPeer(arg4), Pointer.getPeer(arg5));
	}
	protected native static int CRYPTO_set_mem_debug_functions(@Ptr long arg, @Ptr long arg2, @Ptr long arg3, @Ptr long arg4, @Ptr long arg5);
	/**
	 * Original signature : <code>void CRYPTO_get_mem_functions(CRYPTO_get_mem_functions_m_callback*, CRYPTO_get_mem_functions_r_callback*, CRYPTO_get_mem_functions_f_callback*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:471</i>
	 */
	public static void CRYPTO_get_mem_functions(Pointer<LibCryptoLibrary.CRYPTO_get_mem_functions_m_callback > m, Pointer<LibCryptoLibrary.CRYPTO_get_mem_functions_r_callback > r, Pointer<LibCryptoLibrary.CRYPTO_get_mem_functions_f_callback > f) {
		CRYPTO_get_mem_functions(Pointer.getPeer(m), Pointer.getPeer(r), Pointer.getPeer(f));
	}
	protected native static void CRYPTO_get_mem_functions(@Ptr long m, @Ptr long r, @Ptr long f);
	/**
	 * Original signature : <code>void CRYPTO_get_locked_mem_functions(CRYPTO_get_locked_mem_functions_m_callback*, CRYPTO_get_locked_mem_functions_f_callback*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:472</i>
	 */
	public static void CRYPTO_get_locked_mem_functions(Pointer<LibCryptoLibrary.CRYPTO_get_locked_mem_functions_m_callback > m, Pointer<LibCryptoLibrary.CRYPTO_get_locked_mem_functions_f_callback > f) {
		CRYPTO_get_locked_mem_functions(Pointer.getPeer(m), Pointer.getPeer(f));
	}
	protected native static void CRYPTO_get_locked_mem_functions(@Ptr long m, @Ptr long f);
	/**
	 * Original signature : <code>void CRYPTO_get_mem_ex_functions(CRYPTO_get_mem_ex_functions_m_callback*, CRYPTO_get_mem_ex_functions_r_callback*, CRYPTO_get_mem_ex_functions_f_callback*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:473</i>
	 */
	public static void CRYPTO_get_mem_ex_functions(Pointer<LibCryptoLibrary.CRYPTO_get_mem_ex_functions_m_callback > m, Pointer<LibCryptoLibrary.CRYPTO_get_mem_ex_functions_r_callback > r, Pointer<LibCryptoLibrary.CRYPTO_get_mem_ex_functions_f_callback > f) {
		CRYPTO_get_mem_ex_functions(Pointer.getPeer(m), Pointer.getPeer(r), Pointer.getPeer(f));
	}
	protected native static void CRYPTO_get_mem_ex_functions(@Ptr long m, @Ptr long r, @Ptr long f);
	/**
	 * Original signature : <code>void CRYPTO_get_locked_mem_ex_functions(CRYPTO_get_locked_mem_ex_functions_m_callback*, CRYPTO_get_locked_mem_ex_functions_f_callback*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:476</i>
	 */
	public static void CRYPTO_get_locked_mem_ex_functions(Pointer<LibCryptoLibrary.CRYPTO_get_locked_mem_ex_functions_m_callback > m, Pointer<LibCryptoLibrary.CRYPTO_get_locked_mem_ex_functions_f_callback > f) {
		CRYPTO_get_locked_mem_ex_functions(Pointer.getPeer(m), Pointer.getPeer(f));
	}
	protected native static void CRYPTO_get_locked_mem_ex_functions(@Ptr long m, @Ptr long f);
	/**
	 * Original signature : <code>void CRYPTO_get_mem_debug_functions(CRYPTO_get_mem_debug_functions_m_callback*, CRYPTO_get_mem_debug_functions_r_callback*, CRYPTO_get_mem_debug_functions_f_callback*, CRYPTO_get_mem_debug_functions_so_callback*, CRYPTO_get_mem_debug_functions_go_callback*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:478</i>
	 */
	public static void CRYPTO_get_mem_debug_functions(Pointer<LibCryptoLibrary.CRYPTO_get_mem_debug_functions_m_callback > m, Pointer<LibCryptoLibrary.CRYPTO_get_mem_debug_functions_r_callback > r, Pointer<LibCryptoLibrary.CRYPTO_get_mem_debug_functions_f_callback > f, Pointer<LibCryptoLibrary.CRYPTO_get_mem_debug_functions_so_callback > so, Pointer<LibCryptoLibrary.CRYPTO_get_mem_debug_functions_go_callback > go) {
		CRYPTO_get_mem_debug_functions(Pointer.getPeer(m), Pointer.getPeer(r), Pointer.getPeer(f), Pointer.getPeer(so), Pointer.getPeer(go));
	}
	protected native static void CRYPTO_get_mem_debug_functions(@Ptr long m, @Ptr long r, @Ptr long f, @Ptr long so, @Ptr long go);
	/**
	 * Original signature : <code>void* CRYPTO_malloc_locked(int, const char*, int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:484</i>
	 */
	public static Pointer<? > CRYPTO_malloc_locked(int num, Pointer<Byte > file, int line) {
		return Pointer.pointerToAddress(CRYPTO_malloc_locked(num, Pointer.getPeer(file), line));
	}
	@Ptr 
	protected native static long CRYPTO_malloc_locked(int num, @Ptr long file, int line);
	/**
	 * Original signature : <code>void CRYPTO_free_locked(void*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:485</i>
	 */
	public static void CRYPTO_free_locked(Pointer<? > ptr) {
		CRYPTO_free_locked(Pointer.getPeer(ptr));
	}
	protected native static void CRYPTO_free_locked(@Ptr long ptr);
	/**
	 * Original signature : <code>void* CRYPTO_malloc(int, const char*, int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:486</i>
	 */
	public static Pointer<? > CRYPTO_malloc(int num, Pointer<Byte > file, int line) {
		return Pointer.pointerToAddress(CRYPTO_malloc(num, Pointer.getPeer(file), line));
	}
	@Ptr 
	protected native static long CRYPTO_malloc(int num, @Ptr long file, int line);
	/**
	 * Original signature : <code>char* CRYPTO_strdup(const char*, const char*, int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:487</i>
	 */
	public static Pointer<Byte > CRYPTO_strdup(Pointer<Byte > str, Pointer<Byte > file, int line) {
		return Pointer.pointerToAddress(CRYPTO_strdup(Pointer.getPeer(str), Pointer.getPeer(file), line), Byte.class);
	}
	@Ptr 
	protected native static long CRYPTO_strdup(@Ptr long str, @Ptr long file, int line);
	/**
	 * Original signature : <code>void CRYPTO_free(void*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:488</i>
	 */
	public static void CRYPTO_free(Pointer<? > ptr) {
		CRYPTO_free(Pointer.getPeer(ptr));
	}
	protected native static void CRYPTO_free(@Ptr long ptr);
	/**
	 * Original signature : <code>void* CRYPTO_realloc(void*, int, const char*, int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:489</i>
	 */
	public static Pointer<? > CRYPTO_realloc(Pointer<? > addr, int num, Pointer<Byte > file, int line) {
		return Pointer.pointerToAddress(CRYPTO_realloc(Pointer.getPeer(addr), num, Pointer.getPeer(file), line));
	}
	@Ptr 
	protected native static long CRYPTO_realloc(@Ptr long addr, int num, @Ptr long file, int line);
	/**
	 * Original signature : <code>void* CRYPTO_realloc_clean(void*, int, int, const char*, int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:490</i>
	 */
	public static Pointer<? > CRYPTO_realloc_clean(Pointer<? > addr, int old_num, int num, Pointer<Byte > file, int line) {
		return Pointer.pointerToAddress(CRYPTO_realloc_clean(Pointer.getPeer(addr), old_num, num, Pointer.getPeer(file), line));
	}
	@Ptr 
	protected native static long CRYPTO_realloc_clean(@Ptr long addr, int old_num, int num, @Ptr long file, int line);
	/**
	 * Original signature : <code>void* CRYPTO_remalloc(void*, int, const char*, int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:492</i>
	 */
	public static Pointer<? > CRYPTO_remalloc(Pointer<? > addr, int num, Pointer<Byte > file, int line) {
		return Pointer.pointerToAddress(CRYPTO_remalloc(Pointer.getPeer(addr), num, Pointer.getPeer(file), line));
	}
	@Ptr 
	protected native static long CRYPTO_remalloc(@Ptr long addr, int num, @Ptr long file, int line);
	/**
	 * Original signature : <code>void OPENSSL_cleanse(void*, size_t)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:494</i>
	 */
	public static void OPENSSL_cleanse(Pointer<? > ptr, @Ptr long len) {
		OPENSSL_cleanse(Pointer.getPeer(ptr), len);
	}
	protected native static void OPENSSL_cleanse(@Ptr long ptr, @Ptr long len);
	/**
	 * Original signature : <code>void CRYPTO_set_mem_debug_options(long)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:496</i>
	 */
	native public static void CRYPTO_set_mem_debug_options(@org.bridj.ann.CLong long bits);
	/**
	 * Original signature : <code>long CRYPTO_get_mem_debug_options()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:497</i>
	 */
	@org.bridj.ann.CLong 
	native public static long CRYPTO_get_mem_debug_options();
	/**
	 * Original signature : <code>int CRYPTO_push_info_(const char*, const char*, int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:501</i>
	 */
	public static int CRYPTO_push_info_(Pointer<Byte > info, Pointer<Byte > file, int line) {
		return CRYPTO_push_info_(Pointer.getPeer(info), Pointer.getPeer(file), line);
	}
	protected native static int CRYPTO_push_info_(@Ptr long info, @Ptr long file, int line);
	/**
	 * Original signature : <code>int CRYPTO_pop_info()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:502</i>
	 */
	native public static int CRYPTO_pop_info();
	/**
	 * Original signature : <code>int CRYPTO_remove_all_info()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:503</i>
	 */
	native public static int CRYPTO_remove_all_info();
	/**
	 * The last argument has the following significance:<br>
	 * * 0:	called before the actual memory allocation has taken place<br>
	 * 1:	called after the actual memory allocation has taken place<br>
	 * Original signature : <code>void CRYPTO_dbg_malloc(void*, int, const char*, int, int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:513</i>
	 */
	public static void CRYPTO_dbg_malloc(Pointer<? > addr, int num, Pointer<Byte > file, int line, int before_p) {
		CRYPTO_dbg_malloc(Pointer.getPeer(addr), num, Pointer.getPeer(file), line, before_p);
	}
	protected native static void CRYPTO_dbg_malloc(@Ptr long addr, int num, @Ptr long file, int line, int before_p);
	/**
	 * Original signature : <code>void CRYPTO_dbg_realloc(void*, void*, int, const char*, int, int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:514</i>
	 */
	public static void CRYPTO_dbg_realloc(Pointer<? > addr1, Pointer<? > addr2, int num, Pointer<Byte > file, int line, int before_p) {
		CRYPTO_dbg_realloc(Pointer.getPeer(addr1), Pointer.getPeer(addr2), num, Pointer.getPeer(file), line, before_p);
	}
	protected native static void CRYPTO_dbg_realloc(@Ptr long addr1, @Ptr long addr2, int num, @Ptr long file, int line, int before_p);
	/**
	 * Original signature : <code>void CRYPTO_dbg_free(void*, int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:515</i>
	 */
	public static void CRYPTO_dbg_free(Pointer<? > addr, int before_p) {
		CRYPTO_dbg_free(Pointer.getPeer(addr), before_p);
	}
	protected native static void CRYPTO_dbg_free(@Ptr long addr, int before_p);
	/**
	 * Tell the debugging code about options.  By default, the following values<br>
	 * apply:<br>
	 * * 0:                           Clear all options.<br>
	 * V_CRYPTO_MDEBUG_TIME (1):    Set the "Show Time" option.<br>
	 * V_CRYPTO_MDEBUG_THREAD (2):  Set the "Show Thread Number" option.<br>
	 * V_CRYPTO_MDEBUG_ALL (3):     1 + 2<br>
	 * Original signature : <code>void CRYPTO_dbg_set_options(long)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:524</i>
	 */
	native public static void CRYPTO_dbg_set_options(@org.bridj.ann.CLong long bits);
	/**
	 * Original signature : <code>long CRYPTO_dbg_get_options()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:525</i>
	 */
	@org.bridj.ann.CLong 
	native public static long CRYPTO_dbg_get_options();
	/**
	 * Original signature : <code>void CRYPTO_mem_leaks_fp(FILE*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:529</i>
	 */
	public static void CRYPTO_mem_leaks_fp(Pointer FILEPtr1) {
		CRYPTO_mem_leaks_fp(Pointer.getPeer(FILEPtr1));
	}
	protected native static void CRYPTO_mem_leaks_fp(@Ptr long FILEPtr1);
	/**
	 * Original signature : <code>void CRYPTO_mem_leaks(bio_st*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:531</i>
	 */
	public static void CRYPTO_mem_leaks(Pointer<LibCryptoLibrary.bio_st > bio) {
		CRYPTO_mem_leaks(Pointer.getPeer(bio));
	}
	protected native static void CRYPTO_mem_leaks(@Ptr long bio);
	/**
	 * Original signature : <code>void CRYPTO_mem_leaks_cb(CRYPTO_MEM_LEAK_CB*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:534</i>
	 */
	public static void CRYPTO_mem_leaks_cb(Pointer<LibCryptoLibrary.CRYPTO_MEM_LEAK_CB > cb) {
		CRYPTO_mem_leaks_cb(Pointer.getPeer(cb));
	}
	protected native static void CRYPTO_mem_leaks_cb(@Ptr long cb);
	/**
	 * die if we have to<br>
	 * Original signature : <code>void OpenSSLDie(const char*, int, const char*)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:537</i>
	 */
	public static void OpenSSLDie(Pointer<Byte > file, int line, Pointer<Byte > assertion) {
		OpenSSLDie(Pointer.getPeer(file), line, Pointer.getPeer(assertion));
	}
	protected native static void OpenSSLDie(@Ptr long file, int line, @Ptr long assertion);
	/**
	 * Original signature : <code>long* OPENSSL_ia32cap_loc()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:540</i>
	 */
	public static Pointer<org.bridj.CLong > OPENSSL_ia32cap_loc() {
		return Pointer.pointerToAddress(OPENSSL_ia32cap_loc$2(), org.bridj.CLong.class);
	}
	@Ptr 
	@Name("OPENSSL_ia32cap_loc") 
	protected native static long OPENSSL_ia32cap_loc$2();
	/**
	 * Original signature : <code>int OPENSSL_isservice()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:542</i>
	 */
	native public static int OPENSSL_isservice();
	/**
	 * Original signature : <code>int FIPS_mode()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:544</i>
	 */
	native public static int FIPS_mode();
	/**
	 * Original signature : <code>int FIPS_mode_set(int)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:545</i>
	 */
	native public static int FIPS_mode_set(int r);
	/**
	 * Original signature : <code>void OPENSSL_init()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:547</i>
	 */
	native public static void OPENSSL_init();
	/**
	 * CRYPTO_memcmp returns zero iff the |len| bytes at |a| and |b| are equal. It<br>
	 * takes an amount of time dependent on |len|, but independent of the contents<br>
	 * of |a| and |b|. Unlike memcmp, it cannot be used to put elements into a<br>
	 * defined order as the return value when a != b is undefined, other than to be<br>
	 * non-zero.<br>
	 * Original signature : <code>int CRYPTO_memcmp(const void*, const void*, size_t)</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:576</i>
	 */
	public static int CRYPTO_memcmp(Pointer<? > a, Pointer<? > b, @Ptr long len) {
		return CRYPTO_memcmp(Pointer.getPeer(a), Pointer.getPeer(b), len);
	}
	protected native static int CRYPTO_memcmp(@Ptr long a, @Ptr long b, @Ptr long len);
	/**
	 * The following lines are auto generated by the script mkerr.pl. Any changes<br>
	 * made after this point may be overwritten when the script is next run.<br>
	 * Original signature : <code>void ERR_load_CRYPTO_strings()</code><br>
	 * <i>native declaration : openssl-1.0.1e/crypto/crypto.h:582</i>
	 */
	native public static void ERR_load_CRYPTO_strings();
	public static class CRYPTO_EX_DATA_IMPL extends TypedPointer {
		public CRYPTO_EX_DATA_IMPL(long address) {
			super(address);
		}
		public CRYPTO_EX_DATA_IMPL(Pointer address) {
			super(address);
		}
	};
	/** Undefined type */
	public static interface CRYPTO_MEM_LEAK_CB {
		
	};
	/** Undefined type */
	public static interface bio_st {
		
	};
	/** Undefined type */
	public static interface st_CRYPTO_EX_DATA_IMPL {
		
	};
	/** Undefined type */
	public static interface CRYPTO_dynlock_value {
		
	};
}
